import PDFDocument from 'pdfkit'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import Task from '../models/Task.js'
import User from '../models/User.js'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

export const generateWeeklyTimesheet = async () => {
  try {
    // Calculate date range for the past week
    const endDate = new Date()
    endDate.setHours(23, 59, 59, 999)
    
    const startDate = new Date(endDate)
    startDate.setDate(startDate.getDate() - 7)
    startDate.setHours(0, 0, 0, 0)

    // Get all completed tasks in the past week
    const completedTasks = await Task.find({
      status: 'done',
      completedAt: { $gte: startDate, $lte: endDate }
    }).populate('assignee', 'username email')
      .populate('creator', 'username email')
      .populate('feedback.user', 'username')

    // Group tasks by user
    const userTasks = {}
    let totalEstimatedHours = 0
    let totalActualHours = 0

    completedTasks.forEach(task => {
      const userId = task.assignee._id.toString()
      if (!userTasks[userId]) {
        userTasks[userId] = {
          user: task.assignee,
          tasks: [],
          estimatedHours: 0,
          actualHours: 0
        }
      }
      
      userTasks[userId].tasks.push(task)
      userTasks[userId].estimatedHours += task.estimatedHours || 0
      userTasks[userId].actualHours += task.actualHours || 0
      
      totalEstimatedHours += task.estimatedHours || 0
      totalActualHours += task.actualHours || 0
    })

    // Generate PDF
    const doc = new PDFDocument({ margin: 50 })
    const filename = `timesheet-${startDate.toISOString().split('T')[0]}-to-${endDate.toISOString().split('T')[0]}.pdf`
    const filepath = path.join(__dirname, '../uploads', filename)
    
    const stream = fs.createWriteStream(filepath)
    doc.pipe(stream)

    // Header
    doc.fontSize(24)
      .text('SynergySphere Weekly Timesheet', { align: 'center' })
      .moveDown()
    
    doc.fontSize(14)
      .text(`Period: ${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`, { align: 'center' })
      .text(`Generated: ${new Date().toLocaleString()}`, { align: 'center' })
      .moveDown(2)

    // Summary
    doc.fontSize(16)
      .text('Summary', { underline: true })
      .moveDown()
    
    doc.fontSize(12)
      .text(`Total Tasks Completed: ${completedTasks.length}`)
      .text(`Total Estimated Hours: ${totalEstimatedHours}`)
      .text(`Total Actual Hours: ${totalActualHours}`)
      .text(`Efficiency: ${totalEstimatedHours > 0 ? ((totalActualHours / totalEstimatedHours) * 100).toFixed(1) : 0}%`)
      .moveDown(2)

    // User breakdown
    Object.values(userTasks).forEach((userData, index) => {
      doc.fontSize(14)
        .text(`${userData.user.username} (${userData.user.email})`, { underline: true })
        .moveDown()
      
      doc.fontSize(12)
        .text(`Tasks Completed: ${userData.tasks.length}`)
        .text(`Estimated Hours: ${userData.estimatedHours}`)
        .text(`Actual Hours: ${userData.actualHours}`)
        .moveDown()

      // Task details
      userData.tasks.forEach(task => {
        doc.fontSize(10)
          .text(`â€¢ ${task.title}`)
          .text(`  Priority: ${task.priority} | Due: ${task.dueDate.toLocaleDateString()}`)
          .text(`  Hours: ${task.estimatedHours || 0} estimated, ${task.actualHours || 0} actual`)
        
        if (task.feedback && task.feedback.length > 0) {
          doc.text(`  Feedback: ${task.feedback.length} comments`)
        }
        doc.moveDown(0.5)
      })
      
      doc.moveDown()
      
      // Add page break if not the last user
      if (index < Object.keys(userTasks).length - 1) {
        doc.addPage()
      }
    })

    // Footer
    doc.fontSize(10)
      .text('Generated by SynergySphere - Collaborative Workspace Platform', { align: 'center' })

    doc.end()

    return new Promise((resolve, reject) => {
      stream.on('finish', () => {
        resolve({
          success: true,
          filename,
          downloadUrl: `/api/notifications/download-timesheet/${filename}`,
          period: `${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`,
          stats: {
            totalTasks: completedTasks.length,
            totalEstimatedHours,
            totalActualHours,
            userCount: Object.keys(userTasks).length
          }
        })
      })
      
      stream.on('error', reject)
    })

  } catch (error) {
    console.error('Timesheet generation error:', error)
    return {
      success: false,
      error: error.message
    }
  }
}
